publish(user = "shaikfiaz", repo = "DataProduct_Assignment", host = 'github')
publish(user = "shaikfiaz", repo = "https://github.com/shaikfiaz/DataProduct_Assignment", host = 'github')
publish(user = "https://github.com/shaikfiaz/", repo = "DataProduct_Assignment", host = 'github')
publish(user = "http://github.com/shaikfiaz/", repo = "DataProduct_Assignment", host = 'github')
publish(user = "github.com/shaikfiaz/", repo = "DataProduct_Assignment", host = 'github')
?publish
publish(user = "shaikfiaz", repo = "DataProduct_Assignment", host = "github")
?iris
publish(user = "shaikfiaz", repo = "DataProduct_Assignment", host = "github")
data("iris")
library(shiny)
# Define UI for slider demo application
shinyUI<-fluidPage(
#  Application title
titlePanel("Decision Tree on Iris Data Set"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
sliderInput("Sepal.Length", "Sepal.Length:",
min=0, max=10, value=5,step = 0.5),
# Decimal interval with step value
sliderInput("Sepal.Width", "Sepal.Width:",
min = 0, max = 10, value = 3, step= 0.2),
# Specification of range within an interval
sliderInput("Petal.Length", "Petal.Length:",
min = 0, max = 10, value = 4, step= 0.5),
sliderInput("Petal.Width", "Petal.Width:",
min = 0, max = 10, value = 1, step= 0.2)
),
# Show a table summarizing the values entered
mainPanel(
verbatimTextOutput("Result"),
plotOutput("plot")
)
)
)
server<-function(input,output,session){
output$Result<-renderPrint({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
#Test_Data=data.frame(Sepal.Length=0.5, Sepal.Width=1,Petal.Length=2, Petal.Width=3)
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
})
output$plot<-renderPlot({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
#                 require(tree)
#                 Dec.Tree<- tree(Species~., data=Data.Iris)
#                 plot(Dec.Tree)
#                 text(Dec.Tree,pretty = 0)
require(rpart)
Dec.Tree<-rpart(Species~., data=Data.Iris,control=rpart.control(minsplit = 5))
require(rattle)
fancyRpartPlot(Dec.Tree)
}
)
}
shinyApp(shinyUI,server)
---
title       : Decision Tree on IRIS
subtitle    :
author      : Fiaz Shaik
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Contents
1. Introductiont to "iris" data
2. Decision Tree building
3. Deployment
--- .class #id
## Iris Data
- Iris data is standard data set available in R package "datasets"
- Iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.
- Execute following R commands to know more about iris data set
```r
require(datasets)
data(iris)
str(iris)
```
## Decision Tree
- We will build a decision tree model to find out Species of flowers from their  sepal length and width and petal length and width
- For this we use following R package "rpart" and following commands to to build a decision tree
```r
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
```
--- .class #id
## Deployment
```r
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
```
getwd()
?publish_github
publish_github("shaikfiaz","DataProduct_Assignment4")
publish_github("shaikfiaz/DataProduct_Assignment4","DataProduct_Assignment4")
library(shiny)
# Define UI for slider demo application
shinyUI<-fluidPage(
#  Application title
titlePanel("Decision Tree on Iris Data Set"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
sliderInput("Sepal.Length", "Sepal.Length:",
min=0, max=10, value=5,step = 0.5),
# Decimal interval with step value
sliderInput("Sepal.Width", "Sepal.Width:",
min = 0, max = 10, value = 3, step= 0.2),
# Specification of range within an interval
sliderInput("Petal.Length", "Petal.Length:",
min = 0, max = 10, value = 4, step= 0.5),
sliderInput("Petal.Width", "Petal.Width:",
min = 0, max = 10, value = 1, step= 0.2)
),
# Show a table summarizing the values entered
mainPanel(
verbatimTextOutput("Result"),
plotOutput("plot")
)
)
)
server<-function(input,output,session){
output$Result<-renderPrint({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
#Test_Data=data.frame(Sepal.Length=0.5, Sepal.Width=1,Petal.Length=2, Petal.Width=3)
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
})
output$plot<-renderPlot({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
#                 require(tree)
#                 Dec.Tree<- tree(Species~., data=Data.Iris)
#                 plot(Dec.Tree)
#                 text(Dec.Tree,pretty = 0)
require(rpart)
Dec.Tree<-rpart(Species~., data=Data.Iris,control=rpart.control(minsplit = 5))
require(rattle)
fancyRpartPlot(Dec.Tree)
}
)
}
shinyApp(shinyUI,server)
rsconnect::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='<SECRET>')
Sys.setlocale(locale="en_US.UTF-8")
rsconnect::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='<SECRET>')
rsconnect::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='shaikfiaz')
shinyapps::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='shaikfiaz')
shinyapps::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='<SECRET>')
rsconnect::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='nwqO+dWSb54W07G9I5giaDk1RutgvOzdF7o+IK7O')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(shiny)
# Define UI for slider demo application
shinyUI<-fluidPage(
#  Application title
titlePanel("Decision Tree on Iris Data Set"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
sliderInput("Sepal.Length", "Sepal.Length:",
min=0, max=10, value=5,step = 0.5),
# Decimal interval with step value
sliderInput("Sepal.Width", "Sepal.Width:",
min = 0, max = 10, value = 3, step= 0.2),
# Specification of range within an interval
sliderInput("Petal.Length", "Petal.Length:",
min = 0, max = 10, value = 4, step= 0.5),
sliderInput("Petal.Width", "Petal.Width:",
min = 0, max = 10, value = 1, step= 0.2)
),
# Show a table summarizing the values entered
mainPanel(
verbatimTextOutput("Result"),
plotOutput("plot")
)
)
)
server<-function(input,output,session){
output$Result<-renderPrint({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
#Test_Data=data.frame(Sepal.Length=0.5, Sepal.Width=1,Petal.Length=2, Petal.Width=3)
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
})
output$plot<-renderPlot({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
#                 require(tree)
#                 Dec.Tree<- tree(Species~., data=Data.Iris)
#                 plot(Dec.Tree)
#                 text(Dec.Tree,pretty = 0)
require(rpart)
Dec.Tree<-rpart(Species~., data=Data.Iris,control=rpart.control(minsplit = 5))
require(rattle)
fancyRpartPlot(Dec.Tree)
}
)
}
shinyApp(shinyUI,server)
shinyapps::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='<SECRET>')
rsconnect::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='nwqO+dWSb54W07G9I5giaDk1RutgvOzdF7o+IK7O')
rsconnect::setAccountInfo(name='shaikfiaz',
token='829F76007742EF8AC0A8042EBEE76F67',
secret='<SECRET>')
library(shiny)
# Define UI for slider demo application
shinyUI<-fluidPage(
#  Application title
titlePanel("Decision Tree on Iris Data Set"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
sliderInput("Sepal.Length", "Sepal.Length:",
min=0, max=10, value=5,step = 0.5),
# Decimal interval with step value
sliderInput("Sepal.Width", "Sepal.Width:",
min = 0, max = 10, value = 3, step= 0.2),
# Specification of range within an interval
sliderInput("Petal.Length", "Petal.Length:",
min = 0, max = 10, value = 4, step= 0.5),
sliderInput("Petal.Width", "Petal.Width:",
min = 0, max = 10, value = 1, step= 0.2)
),
# Show a table summarizing the values entered
mainPanel(
verbatimTextOutput("Result"),
plotOutput("plot")
)
)
)
server<-function(input,output,session){
output$Result<-renderPrint({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
#Test_Data=data.frame(Sepal.Length=0.5, Sepal.Width=1,Petal.Length=2, Petal.Width=3)
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
})
output$plot<-renderPlot({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
#                 require(tree)
#                 Dec.Tree<- tree(Species~., data=Data.Iris)
#                 plot(Dec.Tree)
#                 text(Dec.Tree,pretty = 0)
require(rpart)
Dec.Tree<-rpart(Species~., data=Data.Iris,control=rpart.control(minsplit = 5))
require(rattle)
fancyRpartPlot(Dec.Tree)
}
)
}
shinyApp(shinyUI,server)
library(shiny)
# Define UI for slider demo application
shinyUI<-fluidPage(
#  Application title
titlePanel("Decision Tree on Iris Data Set"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
sliderInput("Sepal.Length", "Sepal.Length:",
min=0, max=10, value=5,step = 0.5),
# Decimal interval with step value
sliderInput("Sepal.Width", "Sepal.Width:",
min = 0, max = 10, value = 3, step= 0.2),
# Specification of range within an interval
sliderInput("Petal.Length", "Petal.Length:",
min = 0, max = 10, value = 4, step= 0.5),
sliderInput("Petal.Width", "Petal.Width:",
min = 0, max = 10, value = 1, step= 0.2)
),
# Show a table summarizing the values entered
mainPanel(
verbatimTextOutput("Result"),
plotOutput("plot")
)
)
)
server<-function(input,output,session){
output$Result<-renderPrint({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
#Test_Data=data.frame(Sepal.Length=0.5, Sepal.Width=1,Petal.Length=2, Petal.Width=3)
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
})
output$plot<-renderPlot({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
#                 require(tree)
#                 Dec.Tree<- tree(Species~., data=Data.Iris)
#                 plot(Dec.Tree)
#                 text(Dec.Tree,pretty = 0)
require(rpart)
Dec.Tree<-rpart(Species~., data=Data.Iris,control=rpart.control(minsplit = 5))
require(rattle)
fancyRpartPlot(Dec.Tree)
}
)
}
shinyApp(shinyUI,server)
shinyApp(shinyUI,server)
rsconnect::setAccountInfo(name='shaikfiaz', token='829F76007742EF8AC0A8042EBEE76F67', secret='nwqO+dWSb54W07G9I5giaDk1RutgvOzdF7o+IK7O')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
getwd
getwd()
rsconnect::deployApp("/Users/Rahela/Documents/Data Science/R Programs/Data Products/Course Assignment/Decision Tree on Iris Data")
library(shiny)
# Define UI for slider demo application
shinyUI<-fluidPage(
#  Application title
titlePanel("Decision Tree on Iris Data Set"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
sliderInput("Sepal.Length", "Sepal.Length:",
min=0, max=10, value=5,step = 0.5),
# Decimal interval with step value
sliderInput("Sepal.Width", "Sepal.Width:",
min = 0, max = 10, value = 3, step= 0.2),
# Specification of range within an interval
sliderInput("Petal.Length", "Petal.Length:",
min = 0, max = 10, value = 4, step= 0.5),
sliderInput("Petal.Width", "Petal.Width:",
min = 0, max = 10, value = 1, step= 0.2)
),
# Show a table summarizing the values entered
mainPanel(
verbatimTextOutput("Result"),
plotOutput("plot")
)
)
)
server<-function(input,output,session){
output$Result<-renderPrint({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
#Test_Data=data.frame(Sepal.Length=0.5, Sepal.Width=1,Petal.Length=2, Petal.Width=3)
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
})
output$plot<-renderPlot({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
#                 require(tree)
#                 Dec.Tree<- tree(Species~., data=Data.Iris)
#                 plot(Dec.Tree)
#                 text(Dec.Tree,pretty = 0)
require(rpart)
Dec.Tree<-rpart(Species~., data=Data.Iris,control=rpart.control(minsplit = 5))
require(rattle)
fancyRpartPlot(Dec.Tree)
}
)
}
shinyApp(shinyUI,server)
library(shiny)
# Define UI for slider demo application
shinyUI<-fluidPage(
#  Application title
titlePanel("Decision Tree on Iris Data Set"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
sliderInput("Sepal.Length", "Sepal.Length:",
min=0, max=10, value=5,step = 0.5),
# Decimal interval with step value
sliderInput("Sepal.Width", "Sepal.Width:",
min = 0, max = 10, value = 3, step= 0.2),
# Specification of range within an interval
sliderInput("Petal.Length", "Petal.Length:",
min = 0, max = 10, value = 4, step= 0.5),
sliderInput("Petal.Width", "Petal.Width:",
min = 0, max = 10, value = 1, step= 0.2)
),
# Show a table summarizing the values entered
mainPanel(
verbatimTextOutput("Result"),
plotOutput("plot")
)
)
)
server<-function(input,output,session){
output$Result<-renderPrint({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
#Test_Data=data.frame(Sepal.Length=0.5, Sepal.Width=1,Petal.Length=2, Petal.Width=3)
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
})
output$plot<-renderPlot({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
#                 require(tree)
#                 Dec.Tree<- tree(Species~., data=Data.Iris)
#                 plot(Dec.Tree)
#                 text(Dec.Tree,pretty = 0)
require(rpart)
Dec.Tree<-rpart(Species~., data=Data.Iris,control=rpart.control(minsplit = 5))
require(rattle)
fancyRpartPlot(Dec.Tree)
}
)
}
shinyApp(shinyUI,server)
shiny::runApp('~/Documents/Data Science/R Programs/Data Products/Shiny')
shiny::runApp('~/Documents/Data Science/R Programs/Data Products/Shiny')
shiny::runApp('~/Documents/Data Science/R Programs/Data Products/Shiny')
shiny::runApp('~/Documents/Data Science/R Programs/Data Products/Shiny')
shiny::runApp('~/Documents/Data Science/R Programs/Data Products/Shiny')
server<-function(input,output,session){
output$Result<-renderPrint({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
require(rpart)
Dec.Tree<- rpart(Species~., data=Data.Iris)
#Test_Data=data.frame(Sepal.Length=0.5, Sepal.Width=1,Petal.Length=2, Petal.Width=3)
Test_Data=data.frame(Sepal.Length=input$Sepal.Length, Sepal.Width=input$Sepal.Width,Petal.Length=input$Petal.Length, Petal.Width=input$Petal.Width)
Prediction<-predict(Dec.Tree,Test_Data,type = "class")
cat("The predicted Species is:", as.character(Prediction))
})
output$plot<-renderPlot({
attach(iris)
Data.Iris=as.data.frame(iris)
Data.Iris=Data.Iris[complete.cases(Data.Iris),]
#                 require(tree)
#                 Dec.Tree<- tree(Species~., data=Data.Iris)
#                 plot(Dec.Tree)
#                 text(Dec.Tree,pretty = 0)
require(rpart)
Dec.Tree<-rpart(Species~., data=Data.Iris,control=rpart.control(minsplit = 5))
require(rattle)
fancyRpartPlot(Dec.Tree)
}
)
}
shinyApp(shinyUI,server)
